# Production-ready Docker Compose stack for Node.js application
# Includes: Express App, MongoDB, Mongo Express, Redis, Redis UI
# Best practices: Network segmentation, secrets management, health checks, resource limits

# Docker Secrets for secure credential management
secrets:
  mongodb_root_password:
    external: false
    file: ./secrets/mongodb_root_password.txt
  mongodb_app_password:
    external: false
    file: ./secrets/mongodb_app_password.txt
  redis_password:
    external: false
    file: ./secrets/redis_password.txt
  mongo_express_password:
    external: false
    file: ./secrets/mongo_express_password.txt

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
    labels:
      description: "MongoDB persistent data storage"
      environment: "production"
  redis_data:
    driver: local
    labels:
      description: "Redis persistent data storage"
      environment: "production"
  app_uploads:
    driver: local
    labels:
      description: "Application file uploads"
      environment: "production"

# Network segmentation for security isolation
networks:
  # Frontend network for client-facing services
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
    labels:
      description: "Frontend network for client communication"
      environment: "production"
  
  # Backend network for database and cache services
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
    labels:
      description: "Backend network for database communication"
      environment: "production"
  
  # Admin network for management interfaces
  admin:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
    labels:
      description: "Admin network for management interfaces"
      environment: "production"

services:
  # ================================
  # EXPRESS APP - Node.js Application Server
  # ================================
  express-app:
    build: ./src
    container_name: express_app
    hostname: express-app
    restart: unless-stopped
    
    # Run as non-root user for security
    user: "node"
    working_dir: /home/node/app
    
    # Port mapping - using non-standard port for security
    ports:
      - "3000:3000"
    
    # Environment variables for database connections
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=info
      - MAX_CONNECTIONS=100
    
    # Volume mounts for development and uploads
    volumes:
      - app_uploads:/home/node/uploads
      - ./logs:/home/node/logs
    
    # Service dependencies with health checks
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

    develop:  # Compose Watch configuration section
      watch:
        - action: sync+restart
          path: ./src
          target: /home/node/app/src
          ignore:
            - .env
            - '*.json'
            - node_modules/
            - Dockerfile
        - action: rebuild
          path: ./package-lock.json
    
    # Resource constraints  
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check to ensure app is responding
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security and logging configuration
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network connections
    networks:
      - frontend
      - backend
    
    # Secrets access
    secrets:
      - redis_password
      - mongodb_app_password
    
    # Labels for identification
    labels:
      service: "express-app"
      environment: "production"
      version: "1.0.0"
      description: "Main Node.js application server"
    
    # Command to run the server
    command: sh start.sh

  # ================================
  # MONGODB - Primary Database
  # ================================
  mongodb:
    image: mongo:8.0.9
    container_name: mongodb
    hostname: mongodb
    restart: unless-stopped
    
    # Custom port mapping for security
    ports:
      - "27018:27017"  # Non-standard port mapping
    
    # Authentication and initialization environment
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=IGSg9qo8ksEO7O2mHwSZvflOM
      - MONGODB_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password
      - MONGODB_INITDB_DATABASE=products
      - MONGODB_APP_PASSWORD_FILE=/run/secrets/mongodb_app_password
    
    # Persistent data volume
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
      - ./mongodb/config:/etc/mongo:ro
    
    # Resource constraints for stability
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Comprehensive health check
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Structured logging
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"
    
    # Backend network only
    networks:
      - backend
    
    # Secrets for authentication
    secrets:
      - mongodb_root_password
      - mongodb_app_password
    
    # Graceful shutdown configuration
    stop_grace_period: 30s
    
    # Service labels
    labels:
      service: "mongodb"
      environment: "production"
      version: "8.0.4"
      description: "Primary MongoDB database server"

  # ================================
  # MONGO EXPRESS - Web-based MongoDB Admin InterfaceÅ›
  # ================================
  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19  # Specific stable version
    container_name: mongo_express
    hostname: mongo-express
    restart: unless-stopped
    
    # Admin interface port
    ports:
      - "8081:8081"
    
    # MongoDB connection configuration
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD_FILE=/run/secrets/mongodb_root_password
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD_FILE=/run/secrets/mongo_express_password
      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
      - ME_CONFIG_REQUEST_SIZE=100kb
      - ME_CONFIG_CONNECT_RETRIES=10
    
    # Service dependency with health check
    depends_on:
      mongodb:
        condition: service_healthy
    
    # Resource limits for admin interface
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Health check for web interface
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # Admin and backend networks
    networks:
      - admin
      - backend
    
    # Secrets access
    secrets:
      - mongodb_root_password
      - mongo_express_password
    
    # Service labels
    labels:
      service: "mongo-express"
      environment: "production"
      version: "1.0.2"
      description: "MongoDB web administration interface"

  # ================================
  # REDIS - Caching Layer
  # ================================
  redis:
    image: redis:7.4.4-alpine3.21  # Using a stable Alpine version
    container_name: redis_server
    hostname: redis
    restart: unless-stopped
    
    # Custom port for security
    ports:
      - "6380:6379"  # Non-standard port mapping
    
    # Redis configuration with persistence and auth
    command: >
      sh -c "
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
      "
    
    # Persistent data storage
    volumes:
      - redis_data:/data
      - ./redis/config:/usr/local/etc/redis:ro
    
    # Resource constraints
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Redis health check with authentication
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a $$(cat /run/secrets/redis_password) ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"
    
    # Backend network only
    networks:
      - backend
    
    # Password secret
    secrets:
      - redis_password
    
    # Graceful shutdown
    stop_grace_period: 10s
    
    # Service labels
    labels:
      service: "redis"
      environment: "production"
      version: "7.4.4"
      description: "Redis caching and session store"

  # ================================
  # REDIS INSIGHT - Redis Management Interface
  # ================================
  redis-insight:
    image: redis/redisinsight:2.70.0  # Using the official Redis Insight image
    container_name: redis_insight
    hostname: redis-insight
    restart: unless-stopped
    
    # Redis management interface port
    ports:
      - "8080:5540"
    
    # RedisInsight configuration
    environment:
      - RI_REDIS_HOST=redis
      - RI_REDIS_PORT=6379
      - RI_REDIS_PASSWORD=${REDIS_PASSWORD}
    
    # Persistent configuration storage
    volumes:
      - ./redis-insight/data:/db
    
    # Dependency on Redis service
    depends_on:
      redis:
        condition: service_healthy
    
    # Resource limits for management interface
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # Health check for RedisInsight web interface
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5540"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # Admin and backend networks for Redis access
    networks:
      - admin
      - backend
    
    # Redis password access
    secrets:
      - redis_password
    
    # Service labels
    labels:
      service: "redis-insight"
      environment: "production"
      version: "2.70.0"
      description: "Redis management and monitoring interface"

# ================================
# CONFIGURATION NOTES
# ================================

# Environment variables template (.env file should contain):
# MONGODB_ROOT_PASSWORD=your_secure_mongodb_root_password
# MONGODB_APP_PASSWORD=your_secure_mongodb_app_password
# REDIS_PASSWORD=your_secure_redis_password
# MONGO_EXPRESS_PASSWORD=your_secure_mongo_express_password
# NODE_ENV=production
# LOG_LEVEL=info

# Create secrets directory structure:
# mkdir -p secrets
# echo "your_mongodb_root_password" > ./secrets/mongodb_root_password.txt
# echo "your_mongodb_app_password" > ./secrets/mongodb_app_password.txt
# echo "your_redis_password" > ./secrets/redis_password.txt
# echo "your_mongo_express_password" > ./secrets/mongo_express_password.txt

# MongoDB initialization script template (./mongodb/init/init-mongo.js):
# db.createUser({
#   user: "app_user",
#   pwd: cat('/run/secrets/mongodb_app_password'),
#   roles: [
#     {
#       role: "readWrite",
#       db: "products"
#     }
#   ]
# });
# 
# db.products.insertOne({
#   name: "Sample Product",
#   description: "Initial product for testing",
#   price: 99.99,
#   createdAt: new Date()
# });

# Production deployment commands:
# 1. Create secrets directory and files
# 2. Create MongoDB initialization scripts
# 3. docker-compose up -d --remove-orphans
# 4. docker-compose ps (verify all services are healthy)

# Health check monitoring:
# docker inspect <container_name> --format='{{.State.Health.Status}}'

# Security Features Implemented:
# âœ“ Network segmentation (frontend/backend/admin)
# âœ“ Non-standard port mappings
# âœ“ Docker secrets for credential management
# âœ“ Non-root user execution where possible
# âœ“ Resource limits and constraints
# âœ“ Comprehensive health checks
# âœ“ Security-hardened container options
# âœ“ Structured logging with rotation
# âœ“ Graceful shutdown configuration