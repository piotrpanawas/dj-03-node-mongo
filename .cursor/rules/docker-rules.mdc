---
description: This rule should be used when working with Dockerfiles and docker-compose files
globs: 
alwaysApply: false
---
- **Dockerfile Rules**
  - Use official base images from trusted repositories
  - Specify exact image tags (avoid 'latest')
  - Implement multi-stage builds
  - Create non-root user with UID >10000
  - Combine RUN commands to minimize layers
  - Place COPY commands after dependency installation
  - Use .dockerignore to exclude unnecessary files
  - Add HEALTHCHECK instruction with interval/timeout/retries
  - Use COPY instead of ADD unless extracting archives
  - Install security updates during build process

- **Docker Compose Rules**
  - Remove obsolete 'version' field
  - Specify exact image tags in service definitions
  - Create separate networks for frontend/backend/database
  - Use named volumes for persistent data storage
  - Store credentials in Docker secrets (not environment variables)
  - Set explicit CPU/memory limits per service
  - Add healthcheck configuration to each service
  - Use 'unless-stopped' restart policy for non-critical services
  - Use 'always' restart policy for essential services
  - Implement environment variables for non-sensitive configuration
  - Use Docker Compose profiles for environment-specific services
  - Avoid bind mounts in production environments

- **Network Security Rules**
  - Never expose database ports publicly
  - Isolate services using custom networks
  - Never place entire stack in default network
  - Configure firewall rules between network segments

- **Build Optimization Rules**
  - Use Alpine or distroless base images when possible
  - Clean package caches after installation
  - Remove temporary build dependencies
  - Leverage build cache through strategic layer ordering

- **Runtime Security Rules**
  - Never run containers as root user
  - Set filesystem to read-only where possible
  - Disable inter-container communication by default
  - Use seccomp/apparmor security profiles

- **Secret Management Rules**
  - Use Docker secrets for API keys/passwords
  - Mount secrets as files (not environment variables)
  - Rotate secrets through orchestration platform
  - Never commit secret files to version control

- **Environment Configuration Rules**
  - Use single docker-compose.yml with profiles
  - Create docker-compose.override.yml for local dev
  - Activate profiles using --profile flag
  - Example: `docker compose --profile debug up`

- **Prohibited Practices**
  - Never use latest tag in production
  - Never store secrets in Dockerfiles
  - Never expose Docker socket to containers
  - Never run unnecessary privileged capabilities
